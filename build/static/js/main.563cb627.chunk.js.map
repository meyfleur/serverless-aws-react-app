{"version":3,"sources":["graphql/mutations.js","App.js","graphql/queries.js","graphql/subscriptions.js","serviceWorker.js","aws-exports.js","index.js"],"names":["createPet","App","state","name","description","pets","addToStorage","Storage","put","then","result","console","log","catch","err","_callee","_this$state","pet","updatedPetArray","regenerator_default","a","wrap","_context","prev","next","_this","abrupt","Object","objectSpread","toConsumableArray","concat","setState","API","graphql","graphqlOperation","CreatePet","input","t0","stop","this","getPeople","_callee2","data","_context2","get","sent","getData","_callee3","_context3","onChange","event","defineProperty","target","value","_this2","image","listPets","items","_context4","subscribe","eventData","onCreatePet","_this3","filter","p","e","file","files","contentType","_this4","react_default","createElement","className","placeholder","onClick","map","index","key","src","alt","type","accept","onChangeFile","Component","withAuthenticator","includeGreetings","Boolean","window","location","hostname","match","awsmobile","aws_project_region","aws_cognito_identity_pool_id","aws_cognito_region","aws_user_pools_id","aws_user_pools_web_client_id","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","aws_user_files_s3_bucket","aws_user_files_s3_bucket_region","aws_content_delivery_bucket","aws_content_delivery_bucket_region","aws_content_delivery_url","Amplify","configure","config","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.563cb627.chunk.js","sourcesContent":["// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const createPet = `mutation CreatePet($input: CreatePetInput!) {\n  createPet(input: $input) {\n    id\n    name\n    description\n  }\n}\n`;\nexport const updatePet = `mutation UpdatePet($input: UpdatePetInput!) {\n  updatePet(input: $input) {\n    id\n    name\n    description\n  }\n}\n`;\nexport const deletePet = `mutation DeletePet($input: DeletePetInput!) {\n  deletePet(input: $input) {\n    id\n    name\n    description\n  }\n}\n`;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { withAuthenticator } from 'aws-amplify-react';\n\nimport { API, graphqlOperation, Storage } from 'aws-amplify'\nimport { listPets as ListPets } from './graphql/queries'\nimport { createPet as CreatePet } from './graphql/mutations'\nimport { onCreatePet as OnCreatePet } from './graphql/subscriptions'\n\nclass App extends Component {\n  state = {\n    name: '', description: '', pets: []\n  }\n\n  // componentDidMount() { working with lambda\n  //   this.getPeople()\n  //   this.getData()\n  // }\n\n  componentWillMount () {\n    Storage.get('example.png')\n    .then(data => this.setState({ image: data}))\n    .catch(err => console.log('error'))\n  }\n\n  async componentDidMount() {\n    try {\n      const pets = await API.graphql(graphqlOperation(ListPets))\n      console.log('pets:', pets)\n      this.setState({\n        pets: pets.data.listPets.items\n      })\n    } catch (err) {\n      console.log('error fetching pets...', err)\n    }\n\n    API.graphql(\n      graphqlOperation(OnCreatePet)\n    ).subscribe({\n        next: (eventData) => {\n          console.log('eventData', eventData)\n          const pet = eventData.value.data.onCreatePet\n          const pets = [\n            ...this.state.pets.filter(p => {\n              const val1 = p.name + p.description\n              const val2 = pet.name + pet.description\n              return val1 !== val2\n            }),\n            pet\n          ]\n          this.setState({ pets })\n        }\n    });\n\n  }\n\n  // async componentDidMount() { adding auth\n  //   const user = await Auth.currentAuthenticatedUser()\n  //   console.log('user info:', user.signInUserSession.idToken.payload)\n  //   console.log('username:', user.username)\n  // }\n\n  addToStorage = () => {\n    Storage.put('javascript/MyReactComponent.js', `\n      import React from 'react'\n      const App = () => (\n        <p>Hello World</p>\n      )\n      export default App\n    `)\n      .then (result => {\n        console.log('result: ', result)\n      })\n      .catch(err => console.log('error: ', err));\n  }\n\n  onChangeFile(e) {\n    const file = e.target.files[0];\n    Storage.put('example.png', file, {\n        contentType: 'image'\n    })\n    .then (result => console.log(result))\n    .catch(err => console.log(err));\n  }\n\n  createPet = async() => {\n    const { name, description } = this.state\n    if (name === '') return\n    let pet = { name }\n    if (description !== '') {\n      pet = { ...pet, description }\n    }\n    const updatedPetArray = [...this.state.pets, pet]\n    this.setState({ pets: updatedPetArray })\n    try {\n      await API.graphql(graphqlOperation(CreatePet, { input: pet }))\n      console.log('item created!')\n    } catch (err) {\n      console.log('error creating pet...', err)\n    }\n  }\n\n  getPeople = async() => {\n    try {\n      const data = await API.get('amplifyrestapi', '/people')\n      console.log('data from new people endpoint:', data)\n    } catch (err) {\n      console.log('error fetching data..', err)\n    }\n  }\n\n  getData = async() => {\n    try {\n      const data = await API.get('amplifyrestapi', '/pets')\n      console.log('data from Lambda REST API: ', data)\n      this.setState({ pets: data.pets })\n    } catch (err) {\n      console.log('error fetching data..', err)\n    }\n  }\n\n  onChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* {\n          this.state.pets.map((p, i) => ( working with lambda\n            <p key={i}>{p}</p>\n          ))\n        } */}\n        <input\n          name='name'\n          placeholder='name'\n          onChange={this.onChange}\n          value={this.state.name}\n        />\n        <input\n          name='description'\n          placeholder='description'\n          onChange={this.onChange}\n          value={this.state.description}\n        />\n        <button onClick={this.createPet}>Create Pet</button>\n\n        {\n          this.state.pets.map((pet, index) => (\n            <div key={index}>\n              <h3>{pet.name}</h3>\n              <p>{pet.description}</p>\n            </div>\n          ))\n        }\n        \n        <img src={this.state.image} alt=\"test\" />\n        <input\n            type=\"file\" accept='image'\n            onChange={(e) => this.onChangeFile(e)}\n        />\n        <button onClick={this.addToStorage}>Add To Storage</button>\n\n      </div>\n    );\n  }\n}\n\nexport default withAuthenticator(App, { includeGreetings: true });\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const getPet = `query GetPet($id: ID!) {\n  getPet(id: $id) {\n    id\n    name\n    description\n  }\n}\n`;\nexport const listPets = `query ListPets($filter: ModelPetFilterInput, $limit: Int, $nextToken: String) {\n  listPets(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      name\n      description\n    }\n    nextToken\n  }\n}\n`;\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const onCreatePet = `subscription OnCreatePet {\n  onCreatePet {\n    id\n    name\n    description\n  }\n}\n`;\nexport const onUpdatePet = `subscription OnUpdatePet {\n  onUpdatePet {\n    id\n    name\n    description\n  }\n}\n`;\nexport const onDeletePet = `subscription OnDeletePet {\n  onDeletePet {\n    id\n    name\n    description\n  }\n}\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile =  {\n    \"aws_project_region\": \"eu-central-1\",\n    \"aws_cognito_identity_pool_id\": \"eu-central-1:2de4f521-14f7-4062-a634-34fbf158ab12\",\n    \"aws_cognito_region\": \"eu-central-1\",\n    \"aws_user_pools_id\": \"eu-central-1_PYcxCmIns\",\n    \"aws_user_pools_web_client_id\": \"3a9gqs36mejkjioaelg8vraq61\",\n    \"aws_appsync_graphqlEndpoint\": \"https://kkw3ikte4zdcpjeoatuslb37am.appsync-api.eu-central-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"eu-central-1\",\n    \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\",\n    \"aws_user_files_s3_bucket\": \"amplifyreactapp0b6ad90252ba46879c15784a06f21574-devtwo\",\n    \"aws_user_files_s3_bucket_region\": \"eu-central-1\",\n    \"aws_content_delivery_bucket\": \"amplifyreactapp-20181203150658--hostingbucket-devtwo\",\n    \"aws_content_delivery_bucket_region\": \"eu-central-1\",\n    \"aws_content_delivery_url\": \"http://amplifyreactapp-20181203150658--hostingbucket-devtwo.s3-website.eu-central-1.amazonaws.com\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport Amplify from 'aws-amplify';\nimport config from './aws-exports';\nAmplify.configure(config)\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}